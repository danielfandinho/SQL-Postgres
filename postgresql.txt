//primero se crea las tabla llamada vuelos y se declaran las variables que van dentro de la tabla vuelos con su respectiva llave primaria y de que tipo son las variables(varchar-integer).
CREATE TABLE vuelos 
(id SERIAL PRIMARY KEY,
origen VARCHAR NOT NULL,
destino VARCHAR NOT NULL,
duracion INTEGER NOT NULL);

//En las siguientes lineas de codigo se le agregan los valores que llevan las variables (origen, destino y duracion) con el insert into y el nombre de la tabla.
INSERT INTO vuelos (origen, destino, duracion) VALUES('New-York', 'London', 415);
INSERT INTO vuelos (origen, destino, duracion) VALUES('Shanghai', 'Paris', 760);
INSERT INTO vuelos (origen, destino, duracion) VALUES('Instanbul', 'Tokyo', 700);
INSERT INTO vuelos (origen, destino, duracion) VALUES('New York', 'Paris', 435);
INSERT INTO vuelos (origen, destino, duracion) VALUES('Moscow', 'Paris', 245);
INSERT INTO vuelos (origen, destino, duracion) VALUES('Lima', 'New York', 455);

select * from vuelos;   //Se muestra la tabla anteriormente creada con los datos que se le ingresaron en cada variable.
SELECT origen, destino FROM vuelos;    //Muestra solamente en la tabla de vuelos el origen y el destino de cada vuelo.
select * from vuelos where duracion>500;   //Muestra en la tabla los vuelos donde la duracuion sea mayor que quinientos.
select * from vuelos where origen='New york' AND duracion>300;  //Muestra los vuelos desde origen de new york y los que sean mayor que 300.
select * from vuelos where origen='New york' OR duracion>300;  //Muestra los vuelos organixados desde origen de new york o que su duracion sea mayor que 300, dependiendo de que coindicion se cumpla en la tabla.
select * from vuelos where origen like '%a%';  //Muestran los vuelos en los cuales el origen tenga la vocal A, un autocompletado;
select min(duracion) from vuelos;  //Muestra en la tabla los vuelos que sean de minima duracion, es decir que duren menos.
select max(duracion) from vuelos;  //En este caso es diferente, arroja los vuelos que tengan maxima duracion. lo contrario de la condicion anterior.
select * from  vuelos limit 2;  //Te muestra cuantos datos quieres que arroje, el limite de datos que quieres ver.En este caso serían dos.
select * from vuelos order by duracion asc;   //Se organizan los vuelos de forma ascendente, de menor a mayor duracion.
select * from vuelos order by duracion desc;  //En esta caso seria lo contrario, se organizan de mayor a menor, de forma escendente la duracion de cada vuelo.
select * from vuelos order by duracion asc limit 2; //Se organizan los vuelos de froma ascendentes por medio de la duracion, pero en este caso el limite es dos, es decir que solo se van mostrar dos vuelos.
UPDATE vuelos SET origen= 'new-york' where  id =1; //Se modifica el valor de la tabla que tiene de id 1 por lo que se encuentra entre comillas simples.
select * from vuelos; //Se llama a la tabla de vuelos para ver la modificacion que se hizo en el id 1.
delect from vuelos where id =1; //Se elimina el valor o los datos que se encuentran en la id que es igual a 1.
 
select destino, count(*) from vuelos group by destino;//se agrupan los destinos que tienen cada vuelo, para que no haya una redundancia de datos.
select destino, count(*) from vuelos group by destino having count(*)>1; //Agrupa los destinos que se repiten ymuestra cuantos son.

//Se crea una nueva tabla llamada pasajeros con su respectivas varibles y su primary key.
CREATE TABLE pasajeros
(id SERIAL PRIMARY KEY,
nombre VARCHAR NOT NULL,
id_vuelos INTEGER REFERENCES vuelos);

//Se le agregan los valores a cada variable en la tabla como se hizo en la tabla de vuelos.
INSERT INTO pasajeros (nombre, id_vuelos) VALUES ('Julia', 1);
INSERT INTO pasajeros (nombre, id_vuelos) VALUES ('Bryan', 1);
INSERT INTO pasajeros (nombre, id_vuelos) VALUES ('Camila', 2);
INSERT INTO pasajeros (nombre, id_vuelos) VALUES ('Juan', 3);
INSERT INTO pasajeros (nombre, id_vuelos) VALUES ('Carmen', 4);
INSERT INTO pasajeros (nombre, id_vuelos) VALUES ('Chimuelo', 5);
INSERT INTO pasajeros (nombre, id_vuelos) VALUES ('Sara', 6);
select * from pasajeros //Se llama la tabla para ver los datos que se ingresaron en los pasajeros.
select origen, destino, nombre from vuelos join pasajeros on pasajeros.id_vuelos=vuelos.id; //Muestra una relacion de ambas tablas, para saber el origen y el destino del vuelo mas el nombre delpasajero en una sola tabla.
select origen, destino, nombre from vuelos left join pasajeros on pasajeros.id_vuelos = vuelos.id; //Muestra todos los registro de la tabla izquierda (la primera tabla que se menciona en la consulta) junto a todos los registros que coincida con la segunda tabla que se especifica en la sentencia. //by:juan ruiz
